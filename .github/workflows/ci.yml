name: CI Pipeline
on:
  repository_dispatch:
    types: [create-resources, delete-resources, update-resources]

jobs:
  deploy-terraform:
    name: 'Deploy Terraform'
    if: github.event.action == 'create-resources'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: v1.11.3

    - name: Terraform Init
      working-directory: terraform/cluster
      run: terraform init
      env:
        TF_VAR_admin_public_key: ${{ secrets.ADMIN_SSH_KEY }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Terraform Plan
      working-directory: terraform/cluster
      run: terraform plan
      env:
        TF_VAR_admin_public_key: ${{ secrets.ADMIN_SSH_KEY }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Terraform Apply
      working-directory: terraform/cluster
      run: terraform apply -auto-approve
      env:
        TF_VAR_admin_public_key: ${{ secrets.ADMIN_SSH_KEY }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  delete-terraform:
    name: 'Delete Terraform'
    if: github.event.action == 'delete-resources'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: v1.11.3

    - name: Terraform destroy
      working-directory: terraform/cluster
      run: terraform destroy -auto-approve
      env:
        TF_VAR_admin_public_key: ${{ secrets.ADMIN_SSH_KEY }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  update-terraform:
    name: 'Update Terraform'
    if: github.event.action == 'update-resources'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: v1.11.3

    - name: Terraform update
      working-directory: terraform/cluster
      run: terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      with:
        args: |
          -var "admin_ssh_key=${{ secrets.ADMIN_SSH_KEY }}"